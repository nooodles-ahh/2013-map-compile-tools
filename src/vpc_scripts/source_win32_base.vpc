// Settings for /analyze are in a separate .vpc file so that they can be
// changed without triggering a full rebuild of non-analyze builds. On non-analyze
// builds the analyze.vpc file will not be listed as a dependency.
$Include "$SRCDIR\vpc_scripts\source_win32_analyze.vpc" [$ANALYZE]

$Configuration
{
	$General
	{
		// Request a specific compiler toolset.
		$PlatformToolset "v143"
	}

	$General
	{
		$ExecutableDirectories "$(ExecutablePath);$(Path)"
		// We need to override mt.exe for Win7 compatibiity.  Append paths before $(ExecutablePath) if you need VS to use your tools rather than its own
		$ExecutableDirectories "$SRCDIR\devtools\vstools;$BASE"
		// VS 2012 compiles fine but does not link. We want to redirect to stub versions of
		// the tools (like link.exe and mt.exe) so that the link stage will be NOPed when
		// doing /analyze builds.
		$ExecutableDirectories "$SRCDIR\devtools\vs_nop_tools;$BASE" [$ANALYZE]
	}

	$Compiler
	{
		$MultiProcessorCompilation "True"

		$DisableSpecificWarnings	"$BASE;4201" // warning C4201: nonstandard extension used: nameless struct/union
		$DisableSpecificWarnings	"$BASE;4316" // warning C4316: object allocated on the heap may not be aligned 16
		$DisableSpecificWarnings	"$BASE;4456" // warning C4456: declaration of 'c' hides previous local declaration
		$DisableSpecificWarnings	"$BASE;4457" // warning C4457: declaration of 'limit' hides function parameter
		$DisableSpecificWarnings	"$BASE;4471" // warning C4471: '_D3DFORMAT': a forward declaration of an unscoped enumeration must have an underlying type (compiling source file vjolt_debugrender.cpp)
		$DisableSpecificWarnings	"$BASE;4530" // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
		$DisableSpecificWarnings	"$BASE;4838" // warning C4838: conversion from 'unsigned int' to 'const int32' requires a narrowing conversion
		$DisableSpecificWarnings	"$BASE;5054" // warning C5054: operator '|': deprecated between enumerations of different types (compiling source file utlsymbol.cpp)
		$DisableSpecificWarnings	"$BASE;5205" // warning C5205: delete of an abstract class 'ICvar::ICVarIteratorInternal' that has a non-virtual destructor results in undefined behavior
		$DisableSpecificWarnings	"$BASE;4458;4459" // variable shadowing lol
		$DisableSpecificWarnings	"$BASE;5055" // warning C5055: operator '-': deprecated between enumerations and floating-point types
		$DisableSpecificWarnings	"$BASE;26495" // warning C26495: Variable is uninitialized. Always initialize a member variable
	
		
		// Having lots of warnings makes it harder to notice new, and possibly
		// important warnings, both on buildbot and in the output window. Lots
		// of warnings also makes it harder to skip through errors in the output
		// window since F8 stops on both warnings and errors. The only way to
		// keep the warning count down is to have warnings-as-errors.
		// We will not be warning free on 64-bit for a while...
		$TreatWarningsAsErrors				"Yes (/WX)" [!$ANALYZE && !$WIN64]

		// Defines to differentiate 32 from 64 bit builds
		$PreprocessorDefinitions			"$BASE;PLATFORM_64BITS;WIN64;_WIN64;COMPILER_MSVC64" [$WIN64]
		$PreprocessorDefinitions			"$BASE;COMPILER_MSVC32" [$WIN32]

		// /Gw is a VS 2013 option that puts global and static variables in individual sections so that the
		// linker can discard unreferenced data. When building @client /dota with linker optimizations this
		// reduces the client.dll size by about 1.14%. When linker optimizations are disabled this has no
		// effect. This option does not show up in the IDE so we need to add it in $AdditionalOptions.
		// http://blogs.msdn.com/b/vcblog/archive/2013/09/11/introducing-gw-compiler-switch.aspx
		$AdditionalOptions	"$BASE /Gw"
		// Strip unreferenced inline functions from object files to shrink .obj files and .lib files,
		// improve linker speed, and improve conformance. Requires VS 2013 Update 3
		$AdditionalOptions	"$BASE /Zc:inline"
	}
}
